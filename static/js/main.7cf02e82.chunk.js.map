{"version":3,"sources":["components/TodoEntry.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoEntry","state","text","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","shortid","generate","complete","autocomplete","this","className","onChange","placeholder","React","Component","style","color","todo","textDecoration","marginRight","cursor","onClick","onDelete","toggleComplete","type","checked","TodoList","todos","todoToShow","addTodo","map","updateTodoToShow","string","handleDeleteTodo","filter","removeAllTodosThatAreComplete","Todo","key","length","App","count","increment","decrement","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7cf02e82.chunk.js","sourcesContent":["import React from \"react\";\r\nimport shortid from \"shortid\";\r\n\r\nexport default class TodoEntry extends React.Component {\r\n  state = {\r\n    text: \"\",\r\n  };\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n  handleSubmit = (event) => {\r\n    \r\n    event.preventDefault();\r\n    this.props.onSubmit({\r\n      id: shortid.generate(),\r\n      text: this.state.text,\r\n      complete: false,\r\n    });\r\n    this.setState({\r\n      text: \"\",\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <form autocomplete=\"off\" onSubmit={this.handleSubmit} className=\"header\">\r\n        <h1>Todos</h1>\r\n        <input\r\n          className=\"new-todo\"\r\n          name=\"text\"\r\n          value={this.state.text}\r\n          onChange={this.handleChange}\r\n          placeholder=\" what needs to be done ?\"\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default (props) => (\r\n  <div className=\"todo-list\">\r\n    <span\r\n      className=\"view\"\r\n      style={{\r\n        color: props.todo.complete ? \"#cdcdcd\" : \"\",\r\n        textDecoration: props.todo.complete ? \"line-through\" : \"\",marginRight:\"200px\"\r\n      }}\r\n    >\r\n      {props.todo.text}\r\n    </span>\r\n\r\n    <span\r\n      className=\"destroy\"\r\n      style={{ cursor: \"pointer\" }}\r\n      onClick={props.onDelete}\r\n    >\r\n      X\r\n    </span>\r\n    <input\r\n      onClick={props.toggleComplete}\r\n      type=\"checkbox\"\r\n      className=\"toggle\"\r\n      value=\"on\"\r\n      checked={props.todo.complete}\r\n      style={{ cursor: \"pointer\" }}\r\n    ></input>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport TodoEntry from \"./TodoEntry\";\r\nimport Todo from \"./Todo\";\r\n\r\n\r\n\r\nexport default class TodoList extends React.Component {\r\n  state = {\r\n    todos: [],\r\n    todoToShow: \"all\",\r\n  };\r\n  addTodo = (todo) => {\r\n    this.setState({\r\n      todos: [todo, ...this.state.todos],\r\n    });\r\n  };\r\n  toggleComplete = (id) => {\r\n    this.setState({\r\n      todos: this.state.todos.map((todo) => {\r\n        if (todo.id === id) {\r\n          return {\r\n            id: todo.id,\r\n            text: todo.text,\r\n            complete: !todo.complete,\r\n          };\r\n        } else {\r\n          return todo;\r\n        }\r\n      }),\r\n    });\r\n  };\r\n  updateTodoToShow = (string) => {\r\n    this.setState({\r\n      todoToShow: string,\r\n    });\r\n  };\r\n  handleDeleteTodo = (id) => {\r\n    this.setState({\r\n      todos: this.state.todos.filter((todo) => todo.id !== id),\r\n    });\r\n  };\r\n\r\n  removeAllTodosThatAreComplete = () => {\r\n    this.setState({\r\n      todos: this.state.todos.filter((todo) => !todo.complete),\r\n    });\r\n  };\r\n  render() {\r\n    let todos = [];\r\n    if (this.state.todoToShow === \"all\") {\r\n      todos = this.state.todos;\r\n    } else if (this.state.todoToShow === \"active\") {\r\n      todos = this.state.todos.filter((todo) => !todo.complete);\r\n    } else if (this.state.todoToShow === \"complete\") {\r\n      todos = this.state.todos.filter((todo) => todo.complete);\r\n    }\r\n    return (\r\n      <div>\r\n        <TodoEntry onSubmit={this.addTodo} />\r\n        <div className=\"main\">\r\n          {todos.map((todo) => (\r\n            <Todo\r\n              key={todo.id}\r\n              toggleComplete={() => this.toggleComplete(todo.id)}\r\n              onDelete={() => this.handleDeleteTodo(todo.id)}\r\n              todo={todo}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"footer\">\r\n          <div className=\"todo-count\">\r\n            {this.state.todos.filter((todo) => !todo.complete).length} Items\r\n            Left\r\n          </div>\r\n\r\n          <div className=\"filters\">\r\n            <button onClick={() => this.updateTodoToShow(\"all\")}>All</button>\r\n            <button onClick={() => this.updateTodoToShow(\"active\")}>\r\n              Active\r\n            </button>\r\n            <button onClick={() => this.updateTodoToShow(\"complete\")}>\r\n              complete\r\n            </button>\r\n          </div>\r\n          {this.state.todos.filter((todo) => todo.complete).length ? (\r\n            <div>\r\n              <button\r\n                className=\"clear-completed\"\r\n                onClick={this.removeAllTodosThatAreComplete}\r\n              >\r\n                clrear completed\r\n              </button>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        \r\n      \r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport TodoList from \"./components/TodoList\"\n\nimport './App.css';\n\nclass App extends React.Component {\n  state={\n    count:0\n  }\n  increment = () =>{\n    this.setState({\n      count:this.state.count+1\n    })\n  }\n  decrement = () =>{\n    this.setState({\n      count:this.state.count-1\n    })\n  }\n  render(){\n    return (\n      <div id=\"todoapp\" className=\"App todoapp\">\n        <TodoList/>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}